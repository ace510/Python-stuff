"""
This type stub file was generated by pyright.
"""

import collections
import functools
import logging
from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool
from .request import RequestMethods

log = logging.getLogger(__name__)
SSL_KEYWORDS = ("key_file", "cert_file", "cert_reqs", "ca_certs", "ssl_version", "ca_cert_dir", "ssl_context", "key_password")
_key_fields = ("key_scheme", "key_host", "key_port", "key_timeout", "key_retries", "key_strict", "key_block", "key_source_address", "key_key_file", "key_key_password", "key_cert_file", "key_cert_reqs", "key_ca_certs", "key_ssl_version", "key_ca_cert_dir", "key_ssl_context", "key_maxsize", "key_headers", "key__proxy", "key__proxy_headers", "key_socket_options", "key__socks_options", "key_assert_hostname", "key_assert_fingerprint", "key_server_hostname")
PoolKey = collections.namedtuple("PoolKey", _key_fields)
key_fn_by_scheme = { "http": functools.partial(_default_key_normalizer, PoolKey),"https": functools.partial(_default_key_normalizer, PoolKey) }
pool_classes_by_scheme = { "http": HTTPConnectionPool,"https": HTTPSConnectionPool }
class PoolManager(RequestMethods):
    """
    Allows for arbitrary requests while transparently keeping track of
    necessary connection pools for you.

    :param num_pools:
        Number of connection pools to cache before discarding the least
        recently used pool.

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.

    :param \\**connection_pool_kw:
        Additional parameters are used to create fresh
        :class:`urllib3.connectionpool.ConnectionPool` instances.

    Example::

        >>> manager = PoolManager(num_pools=2)
        >>> r = manager.request('GET', 'http://google.com/')
        >>> r = manager.request('GET', 'http://google.com/mail')
        >>> r = manager.request('GET', 'http://yahoo.com/')
        >>> len(manager.pools)
        2

    """
    proxy = ...
    def __init__(self, num_pools=..., headers=..., **connection_pool_kw) -> None:
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        ...
    
    def clear(self):
        """
        Empty our store of pools and direct them all to close.

        This will not affect in-flight connections, but they will not be
        re-used after completion.
        """
        ...
    
    def connection_from_host(self, host, port=..., scheme=..., pool_kwargs=...):
        """
        Get a :class:`ConnectionPool` based on the host, port, and scheme.

        If ``port`` isn't given, it will be derived from the ``scheme`` using
        ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is
        provided, it is merged with the instance's ``connection_pool_kw``
        variable and used to create the new connection pool, if one is
        needed.
        """
        ...
    
    def connection_from_context(self, request_context):
        """
        Get a :class:`ConnectionPool` based on the request context.

        ``request_context`` must at least contain the ``scheme`` key and its
        value must be a key in ``key_fn_by_scheme`` instance variable.
        """
        ...
    
    def connection_from_pool_key(self, pool_key, request_context=...):
        """
        Get a :class:`ConnectionPool` based on the provided pool key.

        ``pool_key`` should be a namedtuple that only contains immutable
        objects. At a minimum it must have the ``scheme``, ``host``, and
        ``port`` fields.
        """
        ...
    
    def connection_from_url(self, url, pool_kwargs=...):
        """
        Similar to :func:`urllib3.connectionpool.connection_from_url`.

        If ``pool_kwargs`` is not provided and a new pool needs to be
        constructed, ``self.connection_pool_kw`` is used to initialize
        the :class:`urllib3.connectionpool.ConnectionPool`. If ``pool_kwargs``
        is provided, it is used instead. Note that if a new pool does not
        need to be created for the request, the provided ``pool_kwargs`` are
        not used.
        """
        ...
    
    def urlopen(self, method, url, redirect=..., **kw):
        """
        Same as :meth:`urllib3.connectionpool.HTTPConnectionPool.urlopen`
        with custom cross-host redirect logic and only sends the request-uri
        portion of the ``url``.

        The given ``url`` parameter must be absolute, such that an appropriate
        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.
        """
        ...
    


class ProxyManager(PoolManager):
    """
    Behaves just like :class:`PoolManager`, but sends all requests through
    the defined proxy, using the CONNECT method for HTTPS URLs.

    :param proxy_url:
        The URL of the proxy to be used.

    :param proxy_headers:
        A dictionary containing headers that will be sent to the proxy. In case
        of HTTP they are being sent with each request, while in the
        HTTPS/CONNECT case they are sent only once. Could be used for proxy
        authentication.

    Example:
        >>> proxy = urllib3.ProxyManager('http://localhost:3128/')
        >>> r1 = proxy.request('GET', 'http://google.com/')
        >>> r2 = proxy.request('GET', 'http://httpbin.org/')
        >>> len(proxy.pools)
        1
        >>> r3 = proxy.request('GET', 'https://httpbin.org/')
        >>> r4 = proxy.request('GET', 'https://twitter.com/')
        >>> len(proxy.pools)
        3

    """
    def __init__(self, proxy_url, num_pools=..., headers=..., proxy_headers=..., **connection_pool_kw) -> None:
        ...
    
    def connection_from_host(self, host, port=..., scheme=..., pool_kwargs=...):
        ...
    
    def urlopen(self, method, url, redirect=..., **kw):
        "Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute."
        ...
    


def proxy_from_url(url, **kw):
    ...

