"""
This type stub file was generated by pyright.
"""

import datetime
import logging
from .packages.six.moves.http_client import HTTPConnection as _HTTPConnection
from .util.ssl_ import assert_fingerprint

log = logging.getLogger(__name__)
port_by_scheme = { "http": 80,"https": 443 }
RECENT_DATE = datetime.date(2019, 1, 1)
class DummyConnection(object):
    """Used to detect a failed ConnectionCls import."""
    ...


class HTTPConnection(_HTTPConnection, object):
    """
    Based on httplib.HTTPConnection but provides an extra constructor
    backwards-compatibility layer between older and newer Pythons.

    Additional keyword parameters are used to configure attributes of the connection.
    Accepted parameters include:

      - ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`
      - ``source_address``: Set the source address for the current connection.
      - ``socket_options``: Set specific options on the underlying socket. If not specified, then
        defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
        Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

        For example, if you wish to enable TCP Keep Alive in addition to the defaults,
        you might pass::

            HTTPConnection.default_socket_options + [
                (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
            ]

        Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
    """
    default_port = ...
    default_socket_options = ...
    is_verified = ...
    def __init__(self, *args, **kw) -> None:
        ...
    
    @property
    def host(self):
        """
        Getter method to remove any trailing dots that indicate the hostname is an FQDN.

        In general, SSL certificates don't include the trailing dot indicating a
        fully-qualified domain name, and thus, they don't validate properly when
        checked against a domain name that includes the dot. In addition, some
        servers may not expect to receive the trailing dot when provided.

        However, the hostname with trailing dot is critical to DNS resolution; doing a
        lookup with the trailing dot will properly only resolve the appropriate FQDN,
        whereas a lookup without a trailing dot will search the system's search domain
        list. Thus, it's important to keep the original host around for use only in
        those cases where it's appropriate (i.e., when doing DNS lookup to establish the
        actual TCP connection across which we're going to send HTTP requests).
        """
        ...
    
    @host.setter
    def host(self, value):
        """
        Setter for the `host` property.

        We assume that only urllib3 uses the _dns_host attribute; httplib itself
        only uses `host`, and it seems reasonable that other libraries follow suit.
        """
        ...
    
    def connect(self):
        ...
    
    def request_chunked(self, method, url, body=..., headers=...):
        """
        Alternative to the common request method, which sends the
        body with chunked encoding and not as one block
        """
        ...
    


class HTTPSConnection(HTTPConnection):
    default_port = ...
    ssl_version = ...
    def __init__(self, host, port=..., key_file=..., cert_file=..., key_password=..., strict=..., timeout=..., ssl_context=..., server_hostname=..., **kw) -> None:
        ...
    


class VerifiedHTTPSConnection(HTTPSConnection):
    """
    Based on httplib.HTTPSConnection but wraps the socket with
    SSL certification.
    """
    cert_reqs = ...
    ca_certs = ...
    ca_cert_dir = ...
    ssl_version = ...
    assert_fingerprint = ...
    def set_cert(self, key_file=..., cert_file=..., cert_reqs=..., key_password=..., ca_certs=..., assert_hostname=..., assert_fingerprint=..., ca_cert_dir=...):
        """
        This method should only be called once, before the connection is used.
        """
        ...
    
    def connect(self):
        ...
    


if ssl:
    UnverifiedHTTPSConnection = HTTPSConnection
    HTTPSConnection = VerifiedHTTPSConnection
else:
    HTTPSConnection = DummyConnection
